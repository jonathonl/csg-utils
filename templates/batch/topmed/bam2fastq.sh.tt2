#!/bin/sh

[% IF settings.cluster == 'csg' -%]
#SBATCH --nodes=1
#SBATCH --cpus-per-task=[% job.procs %]
#SBATCH --mem=[% job.memory %]
#SBATCH --gres=tmp:100
#SBATCH --time=[% job.walltime %]
#SBATCH --workdir=[% job.workdir %]
#SBATCH --partition=topmed
#SBATCH --mail-type=FAIL
#SBATCH --mail-user=[% job.email %]
#SBATCH --job-name=[% job.job_name %]
#SBATCH --nodes=1-1

JOB_ID=$SLURM_JOB_ID
NODELIST=$SLURM_JOB_NODELIST
[% ELSIF settings.cluster == 'flux' -%]
#PBS -l nodes=1:ppn=[% job.procs %]
#PBS -l walltime=[% job.walltime %]
#PBS -l pmem=[% job.memory %]gb
#PBS -l ddisk=100gb
#PBS -m a
#PBS -d [% job.workdir %]
#PBS -M [% job.email %]
#PBS -q flux
#PBS -l qos=flux
#PBS -A [% job.account %]
#PBS -V
#PBS -j oe
#PBS -N [% job.job_name %]

JOB_ID=$PBS_JOBID
NODELIST=$(cat $PBS_NODEFILE)
[% END -%]

META_ID=[% settings.meta_id %]
MAPPER_CMD=[% settings.mapper_cmd %]
MAPPER_LOG_CMD="$MAPPER_CMD log --meta-id $META_ID"
MAPPER_UPDATE_CMD="$MAPPER_CMD update --meta-id $META_ID --step bam2fastq"

TMP_DIR=[% settings.tmp_dir %]

export PERL_CARTON_PATH=[% settings.project_dir %]/local
export PERL5LIB=${PERL_CARTON_PATH}/lib/perl5:[% settings.project_dir %]/lib/perl5:${PERL5LIB}
export PATH=[% settings.project_dir %]/bin:${PERL_CARTON_PATH}/bin:${PATH}

$MAPPER_UPDATE_CMD --start --job-id $JOB_ID --node $NODELIST

$MAPPER_LOG_CMD --message 'starting bam2fastq'

if [ -e $TMP_DIR ]; then
  $MAPPER_LOG_CMD --message 'removing existing TMP_DIR'
  rm -rf $TMP_DIR
fi

$MAPPER_LOG_CMD --message 'created JOB_TMP_DIR'
JOB_TMP_DIR=/tmp/[% settings.project %]/$JOB_ID
mkdir -p $JOB_TMP_DIR
if [ $? -ne 0 ]; then
  $MAPPER_LOG_CMD --message 'failed to create JOB_TMP_DIR' --level critical
  $MAPPER_UPDATE_CMD --state failed
  exit 1
fi

$MAPPER_LOG_CMD --message 'creating TMP_DIR'
mkdir -p $TMP_DIR

if [ $? -ne 0 ]; then
  $MAPPER_LOG_CMD --message 'failed to create TMP_DIR' --level critical
  $MAPPER_UPDATE_CMD --state failed
  exit 1
fi

$MAPPER_LOG_CMD --message 'setting permissions on TMP_DIR'
chmod 750 $TMP_DIR

if [ $? -ne 0 ]; then
  $MAPPER_LOG_CMD --message 'failed to set permissions on TMP_DIR' --level critical
  $MAPPER_UPDATE_CMD --state failed
  exit 1
fi

$MAPPER_LOG_CMD --message "delaying execution for [% settings.delay %] minutes"
sleep "[% settings.delay %]m"

$MAPPER_CMD show --job-info $META_ID > [% settings.job_log %].$JOB_ID
$MAPPER_CMD show --sample-info [% sample.sample_id %] >> [% settings.job_log %].$JOB_ID

$MAPPER_LOG_CMD --message 'beginning bam2fastq pipeline'

export REF_CACHE=[% gotcloud.ref_dir %]/../hg38/md5/%2s/%2s/%s
[% gotcloud.samtools %] view -uh -F 0x900 [% sample.incoming_path %] \
  | [% gotcloud.bam_util %] squeeze --in -.ubam --keepDups --rmTags AS:i,BD:Z,BI:Z,XS:i,MC:Z,MD:Z,NM:i,MQ:i --out -.ubam \
  | [% gotcloud.samtools %] sort -l 1 -@ [% job.procs %] -m 4000M -n -T $JOB_TMP_DIR - \
  | [% gotcloud.samtools %] fixmate - - \
  | [% gotcloud.bam_util %] bam2fastq --in -.bam --outBase ${TMP_DIR}/[% sample.sample_id %] --maxRecordLimitPerFq 20000000 --sortByReadNameOnTheFly --readname --gzip 2> ${TMP_DIR}/fastq.log

rc=$?
$MAPPER_LOG_CMD --message "pipe_rc: $rc"

if [ "$rc" -eq 0 ]; then
  $MAPPER_LOG_CMD --message "[% settings.pipeline %] completed with exit code $rc"
  $MAPPER_UPDATE_CMD --state completed --exit-code $rc

  # TODO - detect unpaired reads and bail if found but save output

  fastq_list="${TMP_DIR}/[% sample.sample_id %].list"
  $MAPPER_LOG_CMD --message "processing fastq list $fastq_list"
  $MAPPER_UPDATE_CMD --fastq-list $fastq_list

  if [ $? -ne 0 ]; then
    $MAPPER_LOG_CMD --message "failed to process the fastq list file" --level critical
    $MAPPER_UPDATE_CMD --state failed --exit-code $rc
    rc=$?
  fi
else
  $MAPPER_LOG_CMD --message "[% settings.pipeline %] failed with exit code $rc" --level critical
  $MAPPER_UPDATE_CMD --state failed --exit-code $rc
fi

exit $rc

# vi: ft=sh
