#!/bin/sh

[% IF settings.cluster == 'csg' -%]
#SBATCH --nodes=1
#SBATCH --cpus-per-task=[% job.procs %]
#SBATCH --mem=[% job.memory %]
#SBATCH --time=[% job.walltime %]
#SBATCH --workdir=[% job.workdir %]
#SBATCH --partition=nomosix
#SBATCH --mail-type=FAIL
#SBATCH --mail-user=[% job.email %]
#SBATCH --job-name=[% job.job_name %]

JOB_ID=$SLURM_JOB_ID
NODELIST=$SLURM_JOB_NODELIST
[% ELSIF settings.cluster == 'flux' -%]
#PBS -l nodes=1:ppn=[% job.procs %]
#PBS -l walltime=[% job.walltime %]
#PBS -l pmem=[% job.memory %]gb
#PBS -m a
#PBS -d [% job.workdir %]
#PBS -M [% job.email %]
#PBS -q flux
#PBS -l qos=flux
#PBS -A [% job.account %]
#PBS -V
#PBS -j oe
#PBS -N [% job.job_name %]

JOB_ID=$PBS_JOBID
NODELIST=$(cat $PBS_NODEFILE)
[% END -%]

export PERL_CARTON_PATH=[% settings.project_dir %]/local
export PERL5LIB=${PERL_CARTON_PATH}/lib/perl5:[% settings.project_dir %]/lib/perl5:${PERL5LIB}
export PATH=[% settings.project_dir %]/bin:${PERL_CARTON_PATH}/bin:${PATH}

META_ID=[% settings.meta_id %]
MAPPER_CMD=[% settings.mapper_cmd %]
MAPPER_LOG_CMD="$MAPPER_CMD log --meta-id $META_ID"
MAPPER_UPDATE_CMD="$MAPPER_CMD update --meta-id $META_ID"

$MAPPER_LOG_CMD --message 'sending fastq to the cloud'
$MAPPER_UPDATE_CMD --start --step cloud-align

# TODO - introduce a delay into the makefile at each target to avoid quota problems
make -j [% fastq.indexes.last + 1 %] -f [% fastq.makefile %]

if [ $? -ne 0 ]; then
  $MAPPER_LOG_CMD --message 'cloud alignment failed' --level critical
  $MAPPER_UPDATE_CMD --state failed
  exit 1
fi

[% FOREACH read_group IN fastq.read_groups -%]
[% FOREACH fastq IN read_group.files.keys -%]
[% SET cram = read_group.files.$fastq -%]
[% SET flagstat = cram _ '.flagstat' -%]
### Begin: [% cram %]
if [ -e [% cram %] ]; then
  [% gotcloud.samtools %] flagstat [% cram %] > [% flagstat %]

  if [ $? -ne 0 ]; then
    $MAPPER_LOG_CMD --message 'flagstat failed for sample [% target.output %]' --level critical
    $MAPPER_UPDATE_CMD --state failed
    exit 1
  fi

  rc=0
  fastq_file=$(basename [% fastq %])
  cram_file=$(basename [% cram %])
  fastq_lines=$(zcat [% fastq %] | wc -l)
  fastq_reads=$(($fastq_lines / 4))
  cram_reads=$(grep 'paired in sequencing' [% flagstat %] | awk {'print $1'})

  if [ $fastq_reads -eq $cram_reads ]; then
    $MAPPER_LOG_CMD --message "completed alignment of fastq $fastq_file"
    $MAPPER_LOG_CMD --message 'removing fastq'
    $MAPPER_UPDATE_CMD --fastq-complete [% fastq %]

    if [ $? -ne 0 ]; then
      $MAPPER_LOG_CMD --message 'failed to delete fastq'
      rc=1
    fi
  else
    $MAPPER_LOG_CMD --message "reads do not match for fastq: $fastq_file and cram: $cram_file" --level critical
    $MAPPER_UPDATE_CMD --state failed
    rc=1
  fi
else
  $MAPPER_LOG_CMD --message 'cloud alignment did not return a cram'
  $MAPPER_UPDATE_CMD --state failed
  rc=1
fi
### END: [% cram %]

[% END -%]
[% END -%]
exit $rc
